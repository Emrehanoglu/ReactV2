{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emre\\\\Desktop\\\\reactV2\\\\memoryProject\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport './App.css';\nimport MemoryCard from \"./components/MemoryCard\";\n\n/* card lara tıkladığımda göronecek olan görselleri tutan bir dizi */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardList = [{\n  \"path\": \"/img/1.jpeg\"\n}, {\n  \"path\": \"/img/2.jpeg\"\n}, {\n  \"path\": \"/img/3.jpeg\"\n}, {\n  \"path\": \"/img/4.jpeg\"\n}, {\n  \"path\": \"/img/5.jpeg\"\n}, {\n  \"path\": \"/img/6.jpeg\"\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]); /* cards içeriği baslangıcta bos set edilsin. */\n  const [selectedOne, setSelectedOne] = useState(null); /* 1. secım. Baslangıcta secili kart yok o yuzden null olsun */\n  const [selectedTwo, setSelectedTwo] = useState(null); /* 2. secım. Baslangıcta secili kart yok o yuzden null olsun */\n  const [disabled, setDisabled] = useState(false); /* disabled false olduğunda kullanıcı arayüzden card secimi yapabilecek true olduğunda yapamayacak */\n\n  const prepareCards = () => {\n    const sortedCards = [...cardList, ...cardList].sort(() => 0.5 - Math.random())\n    /* görselleri sıraladım. Burada gorseller sayısal veya alfabetik bir türde olmadığı obje türünde olduğu için\n    bu sekılde bir metot ile sıralamıs oldum. */.map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    /* map komutu ile de her cardın yanında o card'a ait bir id degeri türettim */\n    setCards(sortedCards);\n    /* cardList içerisindekileri cards içerisine set ettim */\n    /* resimlerden 2 ser tane olması gerektiği için iki defa ...cardList 'i set ettim */\n    setSelectedOne(null); /* baslangıcta 1. secim null olsun */\n    setSelectedTwo(null); /* baslangıcta 2. secim null olsun */\n  };\n\n  const handleSelected = card => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card);\n  };\n  useEffect(() => {\n    prepareCards(); /* uygulama ayağa kalktığında cards içerisi set edilecek */\n  }, []); /* köseli parantez ile uygulama ilk cağırıldığında calısacak demiş oldum */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prepareCards,\n      children: \"Oyunu Baslat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(MemoryCard, {\n        card: card,\n        handleSelected: handleSelected\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uY/oJsAV5iduFMTBiMVas/i4BnA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MemoryCard","jsxDEV","_jsxDEV","cardList","App","_s","cards","setCards","selectedOne","setSelectedOne","selectedTwo","setSelectedTwo","disabled","setDisabled","prepareCards","sortedCards","sort","Math","random","map","card","id","handleSelected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Emre/Desktop/reactV2/memoryProject/src/App.js"],"sourcesContent":["import {useEffect, useState} from \"react\"\nimport './App.css';\nimport MemoryCard from \"./components/MemoryCard\";\n\n/* card lara tıkladığımda göronecek olan görselleri tutan bir dizi */\nconst cardList = [\n  { \"path\": \"/img/1.jpeg\"},\n  { \"path\": \"/img/2.jpeg\"},\n  { \"path\": \"/img/3.jpeg\"},\n  { \"path\": \"/img/4.jpeg\"},\n  { \"path\": \"/img/5.jpeg\"},\n  { \"path\": \"/img/6.jpeg\"},\n]\n\nfunction App() {\n  const [cards,setCards] = useState([]) /* cards içeriği baslangıcta bos set edilsin. */\n  const [selectedOne,setSelectedOne] = useState(null) /* 1. secım. Baslangıcta secili kart yok o yuzden null olsun */\n  const [selectedTwo,setSelectedTwo] = useState(null) /* 2. secım. Baslangıcta secili kart yok o yuzden null olsun */\n  const [disabled,setDisabled] = useState(false) /* disabled false olduğunda kullanıcı arayüzden card secimi yapabilecek true olduğunda yapamayacak */\n  \n  const prepareCards = () => {\n    const sortedCards = [...cardList,...cardList]\n    .sort(() => 0.5 - Math.random()) \n    /* görselleri sıraladım. Burada gorseller sayısal veya alfabetik bir türde olmadığı obje türünde olduğu için\n    bu sekılde bir metot ile sıralamıs oldum. */\n    .map((card) => ({...card, id:Math.random()}))\n    /* map komutu ile de her cardın yanında o card'a ait bir id degeri türettim */\n    setCards(sortedCards) \n    /* cardList içerisindekileri cards içerisine set ettim */\n    /* resimlerden 2 ser tane olması gerektiği için iki defa ...cardList 'i set ettim */\n    setSelectedOne(null) /* baslangıcta 1. secim null olsun */\n    setSelectedTwo(null) /* baslangıcta 2. secim null olsun */\n  }\n\n  const handleSelected = (card) => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card)\n  }\n\n  useEffect(() => {\n    prepareCards() /* uygulama ayağa kalktığında cards içerisi set edilecek */\n  },[]) /* köseli parantez ile uygulama ilk cağırıldığında calısacak demiş oldum */\n\n  return (\n    <div className=\"container\">\n      <h1>Memory App</h1>\n      <button onClick={prepareCards}>Oyunu Baslat</button>\n\n      <div className=\"card-grid\">\n        {\n          cards.map(card => (\n              <MemoryCard card={card} key={card.id} handleSelected={handleSelected}/>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,CACf;EAAE,MAAM,EAAE;AAAa,CAAC,EACxB;EAAE,MAAM,EAAE;AAAa,CAAC,EACxB;EAAE,MAAM,EAAE;AAAa,CAAC,EACxB;EAAE,MAAM,EAAE;AAAa,CAAC,EACxB;EAAE,MAAM,EAAE;AAAa,CAAC,EACxB;EAAE,MAAM,EAAE;AAAa,CAAC,CACzB;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,EAAC;EACtC,MAAM,CAACS,WAAW,EAACC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,EAAC;EACpD,MAAM,CAACW,WAAW,EAACC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,EAAC;EACpD,MAAM,CAACa,QAAQ,EAACC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,EAAC;;EAE/C,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAG,CAAC,GAAGZ,QAAQ,EAAC,GAAGA,QAAQ,CAAC,CAC5Ca,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE;IAC/B;AACJ,gDADI,CAECC,GAAG,CAAEC,IAAI,KAAM;MAAC,GAAGA,IAAI;MAAEC,EAAE,EAACJ,IAAI,CAACC,MAAM;IAAE,CAAC,CAAC,CAAC;IAC7C;IACAX,QAAQ,CAACQ,WAAW,CAAC;IACrB;IACA;IACAN,cAAc,CAAC,IAAI,CAAC,EAAC;IACrBE,cAAc,CAAC,IAAI,CAAC,EAAC;EACvB,CAAC;;EAED,MAAMW,cAAc,GAAIF,IAAI,IAAK;IAC/BZ,WAAW,GAAGG,cAAc,CAACS,IAAI,CAAC,GAAGX,cAAc,CAACW,IAAI,CAAC;EAC3D,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdgB,YAAY,EAAE,EAAC;EACjB,CAAC,EAAC,EAAE,CAAC,EAAC;;EAEN,oBACEZ,OAAA;IAAKqB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBtB,OAAA;MAAAsB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACnB1B,OAAA;MAAQ2B,OAAO,EAAEf,YAAa;MAAAU,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAEpD1B,OAAA;MAAKqB,SAAS,EAAC,WAAW;MAAAC,QAAA,EAEtBlB,KAAK,CAACa,GAAG,CAACC,IAAI,iBACVlB,OAAA,CAACF,UAAU;QAACoB,IAAI,EAAEA,IAAK;QAAeE,cAAc,EAAEA;MAAe,GAAxCF,IAAI,CAACC,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEA;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACvB,EAAA,CA1CQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}